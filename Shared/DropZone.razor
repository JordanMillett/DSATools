@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@using CsvHelper
@using CsvHelper.Configuration
@using System.Globalization

<div @ref="Element" class="drop-zone">
    <br>
    <h4>Drop, paste, or select your CSV file</h4>
    <InputFile OnChange="@OnChange" @ref="Input" />
</div>

<style>
    .drop-zone
    {
    width: 100%;
    height: 200px;

    padding: 25px;

    text-align: center;

    border-color: var(--dsa-red);
    border-style: dashed;
    border-width: 3px;
    border-radius: 10px;
    }
</style>

@code 
{
    ElementReference Element;
    InputFile Input = null!;

    IJSObjectReference Module = null!;
    IJSObjectReference Instance = null!;

    [Parameter]
    public EventCallback<List<IDictionary<string, object>>> OnCSVChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/dropZone.js");

            Instance = await Module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", Element, Input.Element);
        }
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;

        if (file.ContentType == "text/csv")
        {
            using Stream stream = file.OpenReadStream();
            using StreamReader reader = new StreamReader(stream);

            // Configure CsvReader
            CsvConfiguration config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                HasHeaderRecord = true // Indicates the CSV file has headers
            };

            using CsvReader csv = new CsvReader(reader, config);

            // Read records dynamically
            List<IDictionary<string, object>> records = new List<IDictionary<string, object>>();
            await foreach (IDictionary<string, object> record in csv.GetRecordsAsync<dynamic>())
            {
                IDictionary<string, object> dictionary = record;
                records.Add(dictionary);
            }

            // Pass the dynamic records to the event
            await OnCSVChanged.InvokeAsync(records);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (Instance != null)
        {
            await Instance.InvokeVoidAsync("dispose");
            await Instance.DisposeAsync();
        }

        if (Module != null)
        {
            await Module.DisposeAsync();
        }
    }

}