@page "/actionkit-helper"
@using DSATools.Shared

<PageTitle>ActionKit Helper</PageTitle>

<h1>ActionKit Helper</h1>
<br>

@if(FilteredCSV != null)
{

    <label>
        <input type="checkbox" @bind="OnlyGoodStanding" />
        @(OnlyGoodStanding_Count)x - Remove Lapsed & Non-Paying Members
    </label>

    @if (NonMembersCSV != null)
    {
        <br>
        <label>
            <input type="checkbox" @bind="RemoveNonMembers" />
            @(RemoveNonMembers_Count)x - Remove Non-Members Using CSV
        </label>
    }

    <br><br>

    @if (FailedToFilter.Count > 0)
    {
        <span style="color:var(--dsa-red);">Can not filter these Non-Members as they are not present in the Membership List:</span><br>
       

        foreach(string F in FailedToFilter)
        {
            <span>@(F), </span>
        }
        
        <br><br>
    }

    <div class="row">
        <div class="col-12">
            <h4>Filtered List</h4><br>

            <CSVViewer CSV=@FilteredCSV Title="filtered-members" />
        </div>
    </div>
}else
{
    <p>Please upload a membership list below.</p>
}

<br>

<div class="row">
    <div class="col-7">
        <h4>Membership List</h4><br>

        <CSVHandler CSV=@MembershipCSV Whitelist=@View1 Title="all-members" OnCSVChanged="MembershipCSVChanged"/>
    </div>

    <div class="col-5">
        <h4>Non-Members List</h4><br>

        <CSVHandler CSV=@NonMembersCSV Whitelist=@View2 Title="non-members" OnCSVChanged="NonMembersCSVChanged"/>
    </div>
</div>

<style>
    label
    {
    user-select: none;
    }
</style>

@code
{
    List<IDictionary<string, object>> MembershipCSV = null!;
    List<IDictionary<string, object>> NonMembersCSV = null!;

    List<string> View1 = new List<string>()
    {
        "first_name",
        "last_name",
        "email",
        "membership_status"
    };

    List<string> View2 = new List<string>()
    {
        "first_name",
        "last_name",
        "email"
    };

    List<IDictionary<string, object>> FilteredCSV = null!;

    int OnlyGoodStanding_Count = 0;
    private bool _OnlyGoodStanding = true;
    public bool OnlyGoodStanding
    {
        get 
        {
            return _OnlyGoodStanding;
        }
        set 
        {
            _OnlyGoodStanding = value; 
            MakeFilteredList();
        }
    }

    int RemoveNonMembers_Count = 0;
    private bool _RemoveNonMembers = true;
    public bool RemoveNonMembers
    {
        get 
        {
            return _RemoveNonMembers;
        }
        set 
        {
            _RemoveNonMembers = value; 
            MakeFilteredList();
        }
    }

    List<string> FailedToFilter = new List<string>();

    void MembershipCSVChanged(List<IDictionary<string, object>> Data)
    {
        MembershipCSV = Data;
        MakeFilteredList();
    }

    void NonMembersCSVChanged(List<IDictionary<string, object>> Data)
    {
        NonMembersCSV = Data;
        MakeFilteredList();
    }

    void MakeFilteredList()
    {
        if (MembershipCSV == null)
            return;

        // Create a deep copy of MembershipCSV
        FilteredCSV = MembershipCSV.Select(item => DeepCopyDictionary(item)).ToList();

        if (NonMembersCSV != null && RemoveNonMembers)
        {
            FilteredCSV = FilterNonMembers();
        }

        if (OnlyGoodStanding)
        {
            FilteredCSV = FilterMembership();
        }
    }

    // Helper method to deep copy a single dictionary
    IDictionary<string, object> DeepCopyDictionary(IDictionary<string, object> original)
    {
        var copy = new Dictionary<string, object>();

        foreach (var kvp in original)
        {
            // If the value is a reference type (excluding strings and value types), we need to deep copy it.
            // For simplicity, we'll use a method to clone the value if it is a reference type.
            if (kvp.Value is ICloneable cloneable)
            {
                copy[kvp.Key] = cloneable.Clone();
            }
            else
            {
                // If it's a value type (string, int, etc.), just copy the value
                copy[kvp.Key] = kvp.Value;
            }
        }

        return copy;
    }


    List<IDictionary<string, object>> FilterMembership()
    {
        OnlyGoodStanding_Count = 0;

        List<IDictionary<string, object>> filteredByStatus = new List<IDictionary<string, object>>();

        foreach (var member in FilteredCSV)
        {
            if (member.ContainsKey("membership_status"))
            {
                var status = member["membership_status"]?.ToString();
                if (status == "Member in Good Standing")
                {
                    filteredByStatus.Add(member);
                }else
                {
                    OnlyGoodStanding_Count++;
                }
            }
        }

        return filteredByStatus;
    }

    List<IDictionary<string, object>> FilterNonMembers()
    {
        RemoveNonMembers_Count = 0;
        FailedToFilter.Clear();

        foreach (var exclude in NonMembersCSV)
        {
            FailedToFilter.Add(exclude["first_name"].ToString() + " " + exclude["last_name"].ToString());
        }

        List<string> fieldsToMatch = new List<string>()
        {
            "first_name",
            "last_name"
        };

        List<IDictionary<string, object>> filtering = new List<IDictionary<string, object>>();

        foreach (var member in MembershipCSV)
        {
            bool isExcluded = false;

            foreach (var exclude in NonMembersCSV)
            {
                bool match = true;

                foreach (var field in fieldsToMatch)
                {
                    if (member.ContainsKey(field) && exclude.ContainsKey(field))
                    {
                        var memberValue = member[field]?.ToString();
                        var excludeValue = exclude[field]?.ToString();

                        // If any field doesn't match, break out of the loop
                        if (memberValue != excludeValue)
                        {
                            match = false;
                            break;
                        }
                    }
                    else
                    {
                        // If either dictionary is missing the field, treat it as a non-match
                        match = false;
                        break;
                    }
                }

                // If all specified fields match, mark the member as excluded
                if (match)
                {
                    isExcluded = true;
                    FailedToFilter.Remove(member["first_name"].ToString() + " " + member["last_name"].ToString());
                    break;
                }
            }

            // If no match is found in the Exclude list, add the member to the Filtered list
            if (!isExcluded)
            {
                filtering.Add(member);
            }else
            {
                RemoveNonMembers_Count++;
            }
        }
        
        

        return filtering;
    }
}

