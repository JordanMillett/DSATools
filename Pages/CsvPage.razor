@page "/csv-editor"
@using DSATools.Shared

<PageTitle>CSV Editor</PageTitle>

<h1>CSV Editor</h1>
<br>

<div class="row">
    <div class="col-8">
        <h4>Membership List</h4><br>

        @if(Membership != null)
        {
            <CSVViewer Data=@Membership />
        }else
        {
            <DropZone OnCSVChanged="Membership_CSVChanged"/>
        }

    </div>

    <div class="col-4">
        <h4>Exclude List</h4><br>

        @if(Exclude != null)
        {
            <CSVViewer Data=@Exclude />
        }else
        {
            <DropZone OnCSVChanged="Exclude_CSVChanged"/>
        }

    </div>
</div>
<br>
<div class="row">
    <div class="col-12">
        <h4>Filtered List</h4><br>

        @if(Filtered != null)
        {
            <CSVViewer Data=@Filtered />
        }

    </div>
</div>

@code
{
    List<IDictionary<string, object>> Membership = null!;
    List<IDictionary<string, object>> Exclude = null!;

    List<IDictionary<string, object>> Filtered = null!;

    void Membership_CSVChanged(List<IDictionary<string, object>> Data)
    {
        List<string> Whitelist = new List<string>()
        {
            "first_name",
            "last_name",
            "email",
            "membership_status"
        };

        Membership = Filter(Data, Whitelist);

        if(Exclude != null)
            MakeFilteredList();
    }

    void Exclude_CSVChanged(List<IDictionary<string, object>> Data)
    {
        List<string> Whitelist = new List<string>()
        {
            "first_name",
            "last_name",
            "email",
        };

        Exclude = Filter(Data, Whitelist);

        if(Membership != null)
            MakeFilteredList();
    }

    void MakeFilteredList()
    {
        List<string> fieldsToMatch = new List<string>()
        {
            "first_name",
            "last_name"
        };
        
        Filtered = new List<IDictionary<string, object>>();

        foreach (var member in Membership)
        {
            bool isExcluded = false;

            foreach (var exclude in Exclude)
            {
                bool match = true;

                foreach (var field in fieldsToMatch)
                {
                    if (member.ContainsKey(field) && exclude.ContainsKey(field))
                    {
                        var memberValue = member[field]?.ToString();
                        var excludeValue = exclude[field]?.ToString();

                        // If any field doesn't match, break out of the loop
                        if (memberValue != excludeValue)
                        {
                            match = false;
                            break;
                        }
                    }
                    else
                    {
                        // If either dictionary is missing the field, treat it as a non-match
                        match = false;
                        break;
                    }
                }

                // If all specified fields match, mark the member as excluded
                if (match)
                {
                    isExcluded = true;
                    break;
                }
            }

            // If no match is found in the Exclude list, add the member to the Filtered list
            if (!isExcluded)
            {
                Filtered.Add(member);
            }
        }
    }
    
    List<IDictionary<string, object>> Filter(List<IDictionary<string, object>> Data, List<string> Whitelist)
    {
        return Data.Select(row =>
            row.Where(kv => Whitelist.Contains(kv.Key))
            .ToDictionary(kv => kv.Key, kv => kv.Value))
            .Cast<IDictionary<string, object>>()       
            .ToList();
    }
}

