@page "/csv-editor"
@using DSATools.Shared

<PageTitle>CSV Editor</PageTitle>

<h1>CSV Editor</h1>
<br>

@if(FilteredCSV != null)
{
    /*
    <label>
<input type="checkbox" onclick="ToggleGoodStanding" />
    Only Show Good Standing Members
    </label>*/

    <div class="row">
        <div class="col-12">
            <h4>Filtered List</h4><br>

            <CSVViewer CSV=@FilteredCSV Title="filtered-members" />
        </div>
    </div>
}else
{
    <p>Please upload a membership list below.</p>
}

<br>

<div class="row">
    <div class="col-7">
        <h4>Membership List</h4><br>

        <CSVHandler CSV=@MembershipCSV Whitelist=@View1 Title="all-members" OnCSVChanged="MembershipCSVChanged"/>
    </div>

    <div class="col-5">
        <h4>Exclude List</h4><br>

        <CSVHandler CSV=@ExcludeCSV Whitelist=@View2 Title="excluded-members" OnCSVChanged="ExcludeCSVChanged"/>
    </div>
</div>

@code
{
    List<IDictionary<string, object>> MembershipCSV = null!;
    List<IDictionary<string, object>> ExcludeCSV = null!;

    List<string> View1 = new List<string>()
    {
        "first_name",
        "last_name",
        "email",
        "membership_status"
    };

    List<string> View2 = new List<string>()
    {
        "first_name",
        "last_name",
        "email"
    };

    List<IDictionary<string, object>> FilteredCSV = null!;

    bool OnlyGoodStanding = true;

    void ToggleGoodStanding()
    {
        OnlyGoodStanding = !OnlyGoodStanding;
        MakeFilteredList();
    }

    void MembershipCSVChanged(List<IDictionary<string, object>> Data)
    {
        MembershipCSV = Data;
        MakeFilteredList();
    }
    
    void ExcludeCSVChanged(List<IDictionary<string, object>> Data)
    {
        ExcludeCSV = Data;
        MakeFilteredList();
    }

    void MakeFilteredList()
    {
        if (MembershipCSV == null)
            return;

        // Create a deep copy of MembershipCSV
        FilteredCSV = MembershipCSV.Select(item => DeepCopyDictionary(item)).ToList();

        if (ExcludeCSV != null)
        {
            FilteredCSV = FilterExclude();
        }

        if (OnlyGoodStanding)
        {
            FilteredCSV = FilterMembership();
        }
    }

    // Helper method to deep copy a single dictionary
    IDictionary<string, object> DeepCopyDictionary(IDictionary<string, object> original)
    {
        var copy = new Dictionary<string, object>();

        foreach (var kvp in original)
        {
            // If the value is a reference type (excluding strings and value types), we need to deep copy it.
            // For simplicity, we'll use a method to clone the value if it is a reference type.
            if (kvp.Value is ICloneable cloneable)
            {
                copy[kvp.Key] = cloneable.Clone();
            }
            else
            {
                // If it's a value type (string, int, etc.), just copy the value
                copy[kvp.Key] = kvp.Value;
            }
        }

        return copy;
    }


    List<IDictionary<string, object>> FilterMembership()
    {
        List<IDictionary<string, object>> filteredByStatus = new List<IDictionary<string, object>>();

        foreach (var member in FilteredCSV)
        {
            if (member.ContainsKey("membership_status"))
            {
                var status = member["membership_status"]?.ToString();
                if (status == "Member in Good Standing")
                {
                    filteredByStatus.Add(member);
                }
            }
        }

        return filteredByStatus;
    }

    List<IDictionary<string, object>> FilterExclude()
    {
        List<string> fieldsToMatch = new List<string>()
        {
            "first_name",
            "last_name"
        };

        List<IDictionary<string, object>> filtering = new List<IDictionary<string, object>>();

        foreach (var member in MembershipCSV)
        {
            bool isExcluded = false;

            foreach (var exclude in ExcludeCSV)
            {
                bool match = true;

                foreach (var field in fieldsToMatch)
                {
                    if (member.ContainsKey(field) && exclude.ContainsKey(field))
                    {
                        var memberValue = member[field]?.ToString();
                        var excludeValue = exclude[field]?.ToString();

                        // If any field doesn't match, break out of the loop
                        if (memberValue != excludeValue)
                        {
                            match = false;
                            break;
                        }
                    }
                    else
                    {
                        // If either dictionary is missing the field, treat it as a non-match
                        match = false;
                        break;
                    }
                }

                // If all specified fields match, mark the member as excluded
                if (match)
                {
                    isExcluded = true;
                    break;
                }
            }

            // If no match is found in the Exclude list, add the member to the Filtered list
            if (!isExcluded)
            {
                filtering.Add(member);
            }
        }

        return filtering;
    }
}

